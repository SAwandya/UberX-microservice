# k8s/nginx/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: uberx-gateway # <--- UPDATED NAMESPACE
data:
  nginx.conf: |
    server {
        listen 80;
        server_name localhost;

        # Authentication service endpoints - use FQDN
        location /api/auth/ {
            proxy_pass http://auth-service.uberx-auth.svc.cluster.local:3000/api/auth/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 60s;
            proxy_connect_timeout 60s;
        }

        # Internal authentication validation endpoint - use FQDN
        location = /auth/validate {
            internal;
            proxy_pass http://auth-service.uberx-auth.svc.cluster.local:3000/api/auth/validate;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header Authorization $http_authorization;
            proxy_method POST;
        }

        # Protected Order Service endpoints - use FQDN
        location /api/orders/ {
            auth_request /auth/validate;
            auth_request_set $auth_status $upstream_status;

            proxy_pass http://order-service.uberx-order.svc.cluster.local:4001/api/orders/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
            proxy_read_timeout 60s;
            proxy_connect_timeout 60s;
            proxy_intercept_errors on;

            error_page 401 = @error401;
            error_page 500 502 503 504 = @error50x;
        }

        location @error401 {
            default_type application/json;
            return 401 '{"error": "Unauthorized", "message": "Authentication required or token expired"}';
        }

        location @error50x {
            default_type application/json;
            return 500 '{"error": "Server Error", "message": "An internal server error occurred"}';
        }

        # Health check endpoint
        location /health {
            default_type application/json;
            return 200 '{"status": "ok"}';
            add_header Content-Type application/json; # Good practice
        }

        # Add direct access to order service for testing (if needed)
        location /api/orders-direct/ {
            # FQDN: serviceName.namespace.svc.cluster.local
            proxy_pass http://order-service.uberx-order.svc.cluster.local:4001/api/orders/; # <--- UPDATED FQDN
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

         # Add test endpoint that doesn't require authentication
        location /test {
            default_type application/json;
            return 200 '{"status": "ok", "message": "Nginx is working"}';
            add_header Content-Type application/json; # Good practice
        }
    }